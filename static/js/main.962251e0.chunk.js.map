{"version":3,"sources":["components/TodoTemplate.js","TodoContext.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoCreate.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplateBlock","styled","div","TodoTemplate","children","initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","useTodoDispatch","TodoHeadBlock","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayString","weekday","className","length","CheckCircle","props","css","Text","Remove","TodoItemBlock","TodoItem","key","onClick","TodoListBlock","TodoList","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","React","memo","useState","setOpen","setValue","useTodoNextId","onSubmit","e","preventDefault","current","placeholder","autoFocus","onChange","target","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.962251e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n    width: 512px;\r\n    height: 768px;\r\n\r\n    position: relative;\r\n    background: white;\r\n    border-radius: 16px;\r\n    box-shadow: 0 0 8px rgba(0,0,0, 0.04);\r\n\r\n    margin: 0 auto;\r\n    margin-top: 96px;\r\n    margin-bottom: 32px;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nfunction TodoTemplate({ children }) {\r\n\r\n  return (\r\n    <TodoTemplateBlock>{children}</TodoTemplateBlock>\r\n  );\r\n}\r\n\r\nexport default TodoTemplate;","import React, { useReducer, createContext, useContext, useRef } from 'react';\r\n\r\nconst initialTodos = [\r\n    {\r\n        id: 1,\r\n        text: '프로젝트 생성하기',\r\n        done: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: '컴포넌트 스타일링하기',\r\n        done: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: 'Context 만들기',\r\n        done: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: '기능 구현하기긔긔',\r\n        done: false\r\n    }\r\n];\r\n\r\nfunction todoReducer (state, action) {\r\n    switch (action.type) {\r\n        case 'CREATE':\r\n            return state.concat(action.todo);\r\n        case 'TOGGLE':\r\n            return state.map(\r\n                todo => todo.id === action.id\r\n                    ? { ...todo, done: !todo.done }\r\n                    : todo\r\n            );\r\n        case 'REMOVE':\r\n            return state.filter(todo => todo.id !== action.id);\r\n        default:\r\n            throw new Error(`Unhandled action type: ${action.type}`);\r\n    }\r\n\r\n}\r\n\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\n\r\n\r\nexport function TodoProvider ({ children }) {\r\n    const [state, dispatch] = useReducer(todoReducer, initialTodos);\r\n    const nextId = useRef(5)\r\n\r\n    return (\r\n        <TodoStateContext.Provider value={state}>\r\n            <TodoDispatchContext.Provider value={dispatch}>\r\n                <TodoNextIdContext.Provider value={nextId}>\r\n                    {children}\r\n                </TodoNextIdContext.Provider>\r\n            </TodoDispatchContext.Provider>\r\n        </TodoStateContext.Provider>\r\n    );\r\n}\r\n\r\nexport function useTodoState () {\r\n    const context = useContext(TodoStateContext);\r\n    if(!context) {\r\n        throw new Error('Cannor find TodoProvider');\r\n    }\r\n    return context;\r\n}\r\n\r\nexport function useTodoDispatch() {\r\n    const context = useContext(TodoDispatchContext);\r\n    if(!context) {\r\n        throw new Error('Cannor find DispatchProvider');\r\n    }\r\n    return context;\r\n}\r\n\r\nexport function useTodoNextId () {\r\n    const context = useContext(TodoNextIdContext);\r\n    if(!context) {\r\n        throw new Error('Cannor find NextIdProvider');\r\n    }\r\n    return context;\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useTodoState } from '../TodoContext';\r\n\r\nconst TodoHeadBlock = styled.div`\r\n\r\n    padding-top: 48px;\r\n    padding-left: 32px;\r\n    padding-right: 32px;\r\n    padding-bottom: 24px;\r\n    border-bottom: 1px solid #e9ecef;\r\n\r\n    h1 {\r\n        margin: 0;\r\n        font-size: 36px;\r\n        color: #343a40;\r\n    }\r\n    .day {\r\n        margin-top: 4px;\r\n        color: #868e96;\r\n        font-size: 21px;\r\n    }\r\n    .tasks-left {\r\n        color: #20c997;\r\n        font-size: 18px;\r\n        margin-top: 40px;\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nfunction TodoHead() {\r\n    const todos = useTodoState();\r\n    const undoneTasks = todos.filter(todo => !todo.done);\r\n    const today = new Date();\r\n    const dateString = today.toLocaleDateString(\r\n        'ko-KR',\r\n        {\r\n            year: 'numeric',\r\n            month: 'long',\r\n            day: 'numeric'\r\n        }\r\n    );\r\n    const dayString = today.toLocaleDateString(\r\n        'ko-KR',\r\n        {\r\n            weekday: 'long',\r\n        }\r\n    );\r\n\r\n    return (\r\n        <TodoHeadBlock>\r\n            <h1>{dateString}</h1>\r\n            <div className=\"day\">{dayString}</div>\r\n            <div className=\"tasks-left\">할 일 {undoneTasks.length}개 남음</div>\r\n        </TodoHeadBlock>\r\n    );\r\n}\r\n\r\nexport default TodoHead;","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdDone, MdDelete } from 'react-icons/md';\r\nimport { useTodoDispatch } from '../TodoContext';\r\n\r\nconst CheckCircle = styled.div`\r\n    width: 32px;\r\n    height: 32px;\r\n    border-radius: 50%;\r\n    border: 1px solid #ced4da;\r\n    font-size: 24px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-right: 20px;\r\n    cursor: pointer;\r\n    ${props => props.done && css`\r\n        border: 1px solid #e8d9a9;\r\n        color: #38d9a9;\r\n    `}\r\n`;\r\n\r\nconst Text = styled.div`\r\n    flex: 1;\r\n    font-size: 21px;\r\n    color: #495057;\r\n    ${props => props.done && css`\r\n        color: #ced4da;\r\n    `}\r\n`;\r\n\r\nconst Remove = styled.div`\r\n    opacity: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #dee2e6;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        color: #ff6b6b;\r\n    }\r\n`;\r\n\r\nconst TodoItemBlock = styled.div`\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n\r\n    &:hover {\r\n        ${Remove} {\r\n            opacity: 1;\r\n        }\r\n    }\r\n`;\r\n\r\nfunction TodoItem({ key, id, done, text }) {\r\n\r\n    const dispatch = useTodoDispatch();\r\n    const onToggle = () => dispatch({\r\n        type: 'TOGGLE',\r\n        id\r\n    });\r\n    const onRemove = () => dispatch({\r\n        type: 'REMOVE',\r\n        id\r\n    });\r\n\r\n    return (\r\n        <TodoItemBlock>\r\n            <CheckCircle done={done} onClick={onToggle}>\r\n                {done && <MdDone />}\r\n            </CheckCircle>\r\n            <Text done={done}>\r\n                {text}\r\n            </Text>\r\n            <Remove onClick={onRemove}>\r\n                <MdDelete />\r\n            </Remove>\r\n        </TodoItemBlock>\r\n    );\r\n}\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TodoItem from './TodoItem';\r\nimport { useTodoState } from '../TodoContext';\r\n\r\nconst TodoListBlock = styled.div`\r\n    flex: 1;\r\n    padding: 20px 32px;\r\n    padding-bottom: 48px;\r\n    overflow-y: auto;\r\n`;\r\n\r\nfunction TodoList() {\r\n\r\n    const state = useTodoState();\r\n\r\n    return (\r\n        <TodoListBlock>\r\n            {state.map(todo => \r\n                <TodoItem key={todo.id} id={todo.id} text={todo.text} done={todo.done}/>\r\n            )}\r\n        </TodoListBlock>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\r\n\r\nconst CircleButton = styled.button`\r\n    background: #38d9a9;\r\n    &:hover {\r\n        background: #63e6be;\r\n    }\r\n    &:active {\r\n        background: #20c997;\r\n    }\r\n\r\n    z-index: 5;\r\n    cursor: pointer;\r\n    width: 80px;\r\n    height: 80px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 0;\r\n    transform: translate(-50%, 50%);\r\n\r\n    font-size: 60px;\r\n    color: white;\r\n    border-radius: 50%;\r\n\r\n    border: none;\r\n    outline: none;\r\n\r\n    transition: 0.125s all ease-in;\r\n\r\n    ${props => props.open && css`\r\n        background: #ff6b6b;\r\n        &:hover {\r\n            background: #ff8787;\r\n        }\r\n        &:active {\r\n            background: #fa5252;\r\n        }\r\n        transform: translate(-50%, 50%) rotate(45deg);\r\n    `}\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n    width: 100%;\r\n    bottom: 0;\r\n    left: 0%;\r\n    position: absolute;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n    background: #f8f9fa;\r\n    padding: 32px;\r\n    padding-bottom: 72px;\r\n    border-bottom-left-radius: 16px;\r\n    border-bottom-right-radius: 16px;\r\n    border-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    padding: 12px;\r\n    border-radius: 4px;\r\n    border: 1px solid #dee2e6;\r\n    width: 100%;\r\n    outline: none;\r\n    font-size: 18px;\r\n    box-sizing: border-box;\r\n\r\n`;\r\n\r\nfunction TodoCreate() {\r\n    const [open, setOpen] = useState(false);\r\n    const [value, setValue] = useState('');\r\n\r\n    const onToggle = () => setOpen(!open);\r\n    const onChange = e => setValue(e.target.value);\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        dispatch({\r\n            type: 'CREATE',\r\n            todo: {\r\n                id: nextId.current,\r\n                text: value,\r\n                done: false,\r\n            }\r\n        });\r\n        setValue('');\r\n        setOpen(false);\r\n        nextId.current += 1;\r\n    };\r\n\r\n    const dispatch = useTodoDispatch();\r\n    const nextId = useTodoNextId();\r\n\r\n    return (\r\n        <>\r\n            {open && (\r\n            <InsertFormPositioner>\r\n                <InsertForm onSubmit={onSubmit}>\r\n                    <Input\r\n                        placeholder=\"할 일을 입력 후, Enter를 누르세요.\"\r\n                        autoFocus\r\n                        onChange={onChange}\r\n                        value={value}\r\n                    />\r\n                </InsertForm>\r\n            </InsertFormPositioner>\r\n            )}\r\n            <CircleButton onClick={onToggle} open={open}>\r\n                <MdAdd />\r\n            </CircleButton>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default React.memo(TodoCreate);","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoHead from './components/TodoHead';\nimport TodoList from './components/TodoList';\nimport TodoCreate from './components/TodoCreate';\nimport { TodoProvider } from './TodoContext'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef;\n  }\n`;\n\nfunction App() {\n  return (\n    <>\n      <TodoProvider>\n        <GlobalStyle />\n        <TodoTemplate>\n          <TodoHead />\n          <TodoList />\n          <TodoCreate />\n        </TodoTemplate>\n      </TodoProvider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}